//结构体中的生命周期
#[derive(Debug)]
struct A<'a>{
    name: &'a str,
}
fn main() {
    let n = String::from("hello");
    let b = A{
        name:&n
    };
    println!("{:#?}", b);
}

fn get_a_str(s:&str) ->&str{
    s
}

//没有生命周期注解却能够编译，原因：早期的rust中必须显式的声明生命周期，后来rust团队将很明确的模式进行了注解的简化

//遵守生命周期省略规则的情况下能明确变量的声明周期，则无需明确指定生命周期。函数或者方法的参数的生命周期，
//生命周期称为输入生命周期，而返回值的生命周期称为输出生命周期
//编译器采用三条规则判断引用何时不需要生命周期注解当编译器检查完这三条规则后仍然不能计算出引用生命周期，
// 则会停止并生成错误。
//生命周期注解省略规则适用于fn定义以及impl块定义，如下：
//a、每个引用的参数都有他自己的生命周期参数，
    //一个引用的参数的函数：其中有一个生命周期：fn foo<'a>(x:&'a i32)
    // 两个引用的参数的函数，则有两个生命周期：fn foo<'a,'b>(x:&'a i32,y:&'b i32)